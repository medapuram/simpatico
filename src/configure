#!/bin/bash

#-----------------------------------------------------------------------
# Name: configure
#
# Purpose: Sets macros that control conditional compilation of features
#
# Synopsis:
#
#      configure [options]
#
#      The script must be called from the Simpatico root directory
#
# Enabling / Disabling Features: 
#   
# Each of the following option enables or disables a feature. Each such
# options takes 0 or 1 as a required argument, using 1 to denote "enable"
# and 0 to denote "disable".
#
#   -m (0|1)   mpi parallelization         (defines/undefines UTIL_MPI)
#   -g (0|1)   debugging                   (defines/undefines UTIL_DEBUG)
#   -b (0|1)   bond potentials             (defines/undefines INTER_ANGLE)
#   -a (0|1)   angle potentials            (defines/undefines INTER_ANGLE)
#   -d (0|1)   dihedral potentials         (defines/undefines INTER_DIHEDRAL)
#   -e (0|1)   external potentials         (defines/undefines INTER_EXTERNAL)
#   -l (0|1)   McMd links (mutable bonds)  (defines/undefines MCMD_LINK)
#   -s (0|1)   McMd shift                  (defines/undefines MCMD_SHIFT)
#   -f (0|1)   McMd perturbation           (defines/undefines MCMD_PERTURB)
#   -u (0|1)   DdMd modifiers              (defines/undefines DDMD_MODIFIERS)
#   -z (0|1)   molecule ids for atoms      (defines/undefines MCMD_MOLECULES)
#   -k (0|1)   dependency generation       (defines/undefines MAKEDEP)
#
# Other Command Line Options:
#
#   -h compiler  Chooses a compiler, set COMPILER=compiler in config.mk
#   -q           query: prints report of options that are enabled / disabled.
#
# Examples:
#
# To disable debugging, but enable angle and dihedral potentials:
#
#   >  ./configure -g0 -a1 -d1
#
# To set COMPILER=intel in config.mk
#
#   >  ./configure -h intel
#
#-----------------------------------------------------------------------
while getopts "m:g:b:a:d:e:f:l:s:u:z:k:c:h:q" opt; do

  if [ -n "$MACRO" ]; then 
    MACRO=""
  fi
  if [ -n "$FILE" ]; then 
    FILE=""
  fi
  
  case $opt in
    m)
      MACRO=UTIL_MPI
      VALUE=1
      FILE=config.mk
      ;;
    g)
      MACRO=UTIL_DEBUG
      VALUE=1
      FILE=util/config.mk
      ;;
    b)
      MACRO=INTER_BOND
      VALUE=1
      FILE=inter/config.mk
      ;;
    a)
      MACRO=INTER_ANGLE
      VALUE=1
      FILE=inter/config.mk
      ;;
    d)
      MACRO=INTER_DIHEDRAL
      VALUE=1
      FILE=inter/config.mk
      ;;
    e)
      MACRO=INTER_EXTERNAL
      VALUE=1
      FILE=inter/config.mk
      ;;
    l)
      MACRO=MCMD_LINK
      VALUE=1
      FILE=mcMd/config.mk
      ;;
    f)
      MACRO=MCMD_PERTURB
      VALUE=1
      FILE=mcMd/config.mk
      ;;
    s)
      MACRO=MCMD_SHIFT
      VALUE=1
      FILE=mcMd/config.mk
      ;;
    u)
      MACRO=DDMD_MODIFIERS
      VALUE=1
      FILE=ddMd/config.mk
      ;;
    z)
      MACRO=DDMD_MOLECULES
      VALUE=1
      FILE=ddMd/config.mk
      ;;
    k)
      case $OPTARG in
      0)  # Disable (comment out) the definition of MAKEDEP
        if [ `grep "^ *MAKEDEP" config.mk` ]; then
           echo "Disabling MAKEDEP in file config.mk" >&2
           sed "s/^ *MAKEDEP/#MAKEDEP/" config.mk > temp
           cp temp config.mk
           rm temp
        else
           echo "MAKEDEP already disabled in file config.mk" >&2
        fi
        ;;
      1) # Enable (uncomment) the definition of MAKEDEP
        if [ `grep "^ *MAKEDEP" config.mk` ]; then
           echo "MAKEDEP already enabled in file config.mk" >&2
        else
           echo "Enabling MAKEDEP in file config.mk" >&2
           sed "s/^ *# *MAKEDEP/MAKEDEP/" config.mk > temp
           cp temp config.mk
           rm temp
        fi
        ;;
      esac
      ;;
    h)
      FILE=config.mk
      cp "$FILE" temp
      sed "s/COMPILER=.*$/COMPILER=$OPTARG/" temp > "$FILE"
      echo "Setting COMPILER = $OPTARG in file $FILE" >&2
      rm temp
      ;;
    q)
      if [ `grep "^ *UTIL_MPI *= *1" config.mk` ]; then
         echo "-m ON  - MPI" >&2
         MPI=1
      else
         echo "-m OFF - MPI" >&2
         MPI=
      fi
      if [ `grep "^ *UTIL_DEBUG *= *1" util/config.mk` ]; then
         echo "-g ON  - debugging" >&2
      else
         echo "-g OFF - debugging" >&2
      fi
      if [ `grep "^ *INTER_BOND *= *1" inter/config.mk` ]; then
         echo "-b ON  - bond potential" >&2
      else
         echo "-b OFF - bond potential" >&2
      fi
      if [ `grep "^ *INTER_ANGLE *= *1" inter/config.mk` ]; then
         echo "-a ON  - angle potential" >&2
      else
         echo "-a OFF - angle potential" >&2
      fi
      if [ `grep "^ *INTER_DIHEDRAL *= *1" inter/config.mk` ]; then
         echo "-d ON  - dihedral potential" >&2
      else
         echo "-d OFF - dihedral potential" >&2
      fi
      if [ `grep "^ *INTER_EXTERNAL *= *1" inter/config.mk` ]; then
         echo "-e ON  - external potential" >&2
      else
         echo "-e OFF - external potential" >&2
      fi
      if [ `grep "^ *MCMD_LINK *= *1" mcMd/config.mk` ]; then
         echo "-l ON  - McMd links (mutable bonds)" >&2
      else
         echo "-l OFF - McMd links (mutable bonds)" >&2
      fi
      if [ `grep "^ *MCMD_SHIFT *= *1" mcMd/config.mk` ]; then
         echo "-s ON  - McMd shift" >&2
      else
         echo "-s OFF - McMd shift" >&2
      fi
      if [ -n "$MPI" ]; then
         if [ `grep "^ *MCMD_PERTURB *= *1" mcMd/config.mk` ]; then
            echo "-f ON  - McMd free energy perturbation" >&2
         else
            echo "-f OFF - McMd free energy perturbation" >&2
         fi
      fi
      if [ `grep "^ *DDMD_MODIFIERS *= *1" ddMd/config.mk` ]; then
         echo "-u ON  - DdMd modifiers" >&2
      else
         echo "-u OFF - DdMd modifiers" >&2
      fi
      if [ `grep "^ *DDMD_MOLECULES *= *1" ddMd/config.mk` ]; then
         echo "-z ON  - DdMd molecules" >&2
      else
         echo "-z OFF - DdMd molecules " >&2
      fi
      if [ `grep "^ *MAKEDEP" config.mk` ]; then
         echo "-k ON  - automatic dependency tracking" >&2
      else
         echo "-k OFF - automatic dependency tracking" >&2
      fi
      echo `grep "^ *COMPILER *=" config.mk` >&2
      ;;
  esac

  if [ -n "$MACRO" ]; then
    
    case $OPTARG in
    0)  # Disable (comment out) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "Disabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *$MACRO=/#$MACRO=/" temp > "$FILE"
         rm temp
      else
         echo "$MACRO already disabled in file $FILE" >&2
      fi
      ;;
    1) # Enable (uncomment) the macro=1 definition
      if [ `grep "^ *$MACRO *= *1" "$FILE"` ]; then
         echo "$MACRO already enabled in file $FILE" >&2
      else
         echo "Enabling $MACRO in file $FILE" >&2
         sed "s/$MACRO *=.*$/$MACRO=1/" "$FILE" > temp
         sed "s/^ *# *$MACRO=/$MACRO=/" temp > "$FILE"
         rm temp
      fi
      ;;
    esac
  fi

done

