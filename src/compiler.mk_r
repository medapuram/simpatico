#-----------------------------------------------------------------------
# file: src/compiler.mk
#
# This makefile fragment is included by all other makefiles. It defines
# absolute paths for various directories, and specifies the choice of
# compiler and compiler options. It also (optionally) defines macros
# UTIL_MPI and MAKEDEP that enable MPI and dependency generation,
# respectively.
# 
# Users may select a compiler and a MPI library implementation by setting
# values for the strings:
#
# COMPILER = label for selecting a compiler (gcc, intel, etc.)
# MPI_LIB  = label for selecting an MPI library.
#
# Each valid combination of these strings selects a block of definitions 
# of CXXFLAGS and several other variables that define the options passed 
# to the compiler and linker. Compiler options may also be modified by 
# modifying values of these variables within each such block. 
#
# The configure script may be used to modify the value of the COMPILER 
# macro, using the -c option. This script may also be used to comment
# out or uncomment the definitions of the macros UTIL_MPI (which enables
# MPI) and MAKEDEP (which enabled dependency generation).
#
# Users may edit the file src/compiler.mk, but should avoid modifying 
# the file src/compiler.mk_r, which is a repository version. An initial 
# version of the compiler.mk configuration file is created by the setup 
# script by copying compiler.mk_r. 
#
# The setup script should set the value of ROOT_DIR in compiler.mk to 
# the absolute path to the root simpatico/ directory. In compiler.mk_r, 
# ROOT_DIR is assigned a placeholder value "PWD". 
#-----------------------------------------------------------------------
# Absolute directory paths

ROOT_DIR=PWD
SRC_DIR=$(ROOT_DIR)/src
BIN_DIR=$(ROOT_DIR)/bin
LIB_DIR=$(ROOT_DIR)/lib
TESTS_DIR=$(ROOT_DIR)/tests

#-----------------------------------------------------------------------
# Mesage Passing Library (Disable/enable commenting out or uncommenting).

#UTIL_MPI=1

#-----------------------------------------------------------------------
# Automatic dependency generation (Disable by commenting out)
 
MAKEDEP=$(ROOT_DIR)/bin/makeDep

#-----------------------------------------------------------------------
# COMPILER and MPI_LIB identifiers (choose as needed).

COMPILER=gcc
MPI_LIB=mpicxx

# ------------------------------------------------------------------------
# Compiler settings:
#
# Each of the following blocks sets values appropriate for a particular
# compiler and mpi library for the following set of makefile variables:
#
# CXX        - C++ compiler command (must be in PATH or an absolute path)
# CXXFLAGS   - flags used to compile source files, without linking
# LDFLAGS    - flags used to compile and link a main program
# TESTFLAGS  - flags usd to compile unit test programs
# AR         - path to archiver, to create library (*.a) files
# ARFLAGS    - flags used by archiver
# MPIRUN     - command to start mpi, with np option, e.g. "mpirun -np"
# ------------------------------------------------------------------------

#-- Gnu GCC compiler ------
ifeq ($(COMPILER),gcc)
   ifneq ($(UTIL_MPI),1)
      # Serial Gnu g++ (no mpi)
      CXX=g++
      CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98 -pedantic
      LDFLAGS=
      TESTFLAGS= -Wall -std=c++98 -pedantic
   else
      ifeq ($(MPI_LIB),mpicxx)
         # Gnu g++ using a module and mpicxx macro
         CXX=mpicxx
         CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98
         LDFLAGS=
         TESTFLAGS= -O3 -ffast-math -Wall -std=c++98 -pedantic
      endif
      ifeq ($(MPI_LIB),openmpi)
         # Gnu g++ using the openmpi library explicitly
         CXX=g++
         CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98 -I/opt/local/include/openmpi
         LDFLAGS= -L/opt/local/lib -lmpi_cxx -lmpi
         TESTFLAGS= -O3 -ffast-math -Wall -std=c++98 -pedantic
      endif
   endif
   AR=ar
   ARFLAGS=rcs
   MPIRUN=mpirun -np
endif


# -- Intel ICC compiler ---
ifeq ($(COMPILER),intel)
   ifneq ($(UTIL_MPI),1)
      # Serial intel icpc compiler (no mpi)
      CXX=icpc
      CXXFLAGS= -fast -ansi
      LDFLAGS= -fast
      TESTFLAGS= -ansi
   else
      ifeq ($(MPI_LIB),mpicxx)
         # Intel icpc compiler using a module and mpicxx script
         CXX=mpicxx
         CXXFLAGS= -ansi
         LDFLAGS=
         TESTFLAGS= -ansi
      endif
   endif
   AR=xiar
   ARFLAGS=rcs
   MPIRUN=mpirun -np
endif

