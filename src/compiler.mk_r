#-----------------------------------------------------------------------
# file: src/compiler.mk
#
# This makefile fragment is included by all other makefiles. It defines
# absolute paths for the root and src/ directories, specifies the choice
# of compiler and various compiler options and (optionally) defines the 
# macro MAKEDEP that enables automatic dependency generation.
# 
# Users may need to modify the following variables:
#
# ROOT_DIR = absolute path to the root (e.g., trunk) directory.
# COMPILER = label for the compiler (gcc, intel, etc.)
#
# Compiler options may also be modified by modifying values of CXXFLAGS
# etc. within the ifeq() ... endif block for the relevant compiler.
# Users may also wish to uncomment the definition of MAKEDEP, as 
# discussed below.
#
# Users may modify the file src/compiler.mk, but should avoid modifying 
# the repository copy src/compiler.mk_r, which is under version control. 
# The operational file src/compiler.mk is created by the configure script,
# by making a copy of src/compiler.mk_r and modifying the value of the
# variable ROOT_DIR (which has a placeholder value in src/compiler.mk_r).
# After the configure script is run from the root simpatico/ directory,
# the value of ROOT_DIR should have been set to the absolute path to 
# that directory on the users machine.
#-----------------------------------------------------------------------
# Absolute directory paths

ROOT_DIR=PWD
SRC_DIR=$(ROOT_DIR)/src
BIN_DIR=$(ROOT_DIR)/bin
LIB_DIR=$(ROOT_DIR)/lib
TESTS_DIR=$(ROOT_DIR)/tests

#-----------------------------------------------------------------------
# Enabling / Disabling MPI (Mesage Passing Library)

#UTIL_MPI=1

#-----------------------------------------------------------------------
# Automatic dependency generation:
#
# To disable automatic dependency generation, comment out the definition
# of MAKEDEP. To enable it: (1) uncomment the definition of MAKEDEP, and
# (2) Add the simpatico/tools/python directory to the PYTHONPATH unix
# environment variable. 
 
MAKEDEP=$(ROOT_DIR)/bin/makeDep

#-----------------------------------------------------------------------
# COMPILER and MPI_LIB identifiers:

COMPILER:=gcc
MPI_LIB=mpicxx

# ------------------------------------------------------------------
# Compiler settings:
#
# Each of the following blocks sets values for the following set
# of makefile variables, using values appropriate to a particular
# compiler:
#
# CXX        - path to C++ compiler
# CXXFLAGS   - flags used to compile source files, without linking
# LDFLAGS    - flags used to compile and link a main program
# TESTFLAGS  - flags usd to compile unit test programs
# AR         - path to archiver, to create library (*.a) files
# ARFLAGS    - flags used by archiver
# ------------------------------------------------------------------

#-- Gnu GCC compiler ------
ifeq ($(COMPILER),gcc)
   ifneq ($(UTIL_MPI),1)
      # Serial Gnu g++ (no mpi)
      CXX=g++
      CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98 -pedantic
      LDFLAGS=
      TESTFLAGS= -Wall -std=c++98 -pedantic
      AR=ar
      ARFLAGS=rcs
   else
      ifeq ($(MPI_LIB),mpicxx)
         # Gnu g++ using a module and mpicxx macro
         CXX=mpicxx
         CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98
         LDFLAGS=
         TESTFLAGS= -O3 -ffast-math -Wall -std=c++98 -pedantic
         AR=ar
         ARFLAGS=rcs
      endif
      ifeq ($(MPI_LIB),openmpi)
         # Gnu g++ using the openmpi library explicitly
         CXX=g++
         CXXFLAGS= -O3 -ffast-math -Wall -Winline -std=c++98 -I/opt/local/include/openmpi
         LDFLAGS= -L/opt/local/lib -lmpi_cxx -lmpi
         TESTFLAGS= -O3 -ffast-math -Wall -std=c++98 -pedantic
         AR=ar
         ARFLAGS=rcs
      endif
   endif
endif


# -- Intel ICC compiler ---
ifeq ($(COMPILER),intel)
   ifneq ($(UTIL_MPI),1)
      # Serial intel icpc compiler (no mpi)
      CXX=icpc
      CXXFLAGS= -fast -ansi
      LDFLAGS= -fast
      TESTFLAGS= -ansi
      AR=xiar
      ARFLAGS=rcs
   else
      ifeq ($(MPI_LIB),mpicxx)
         # Intel icpc compiler using a module and mpicxx macro
         CXX=mpicxx
         CXXFLAGS= -ansi
         LDFLAGS=
         TESTFLAGS= -ansi
         AR=xiar
         ARFLAGS=rcs
      endif
   endif
endif


# -- PathScale compiler ------------
ifeq ($(COMPILER),pathscale)
   ifneq ($(UTIL_MPI),1)
      CXX=pathCXX
      CXXFLAGS= -Ofast
      LDFLAGS= -Ofast
      TESTFLAGS=
      AR=ar
      ARFLAGS=rcs
   else
      ifeq ($(MPI_LIB),mpicxx)
         CXX=mpicxx
         CXXFLAGS= -Ofast
         LDFLAGS= -Ofast
         TESTFLAGS=
         AR=ar
         ARFLAGS=rcs
      endif
   endif
endif
