How to allow for optional entries in a parameter file:

==========================================================================
class Label:

  - Add a stringstream buffer_ to Label. 
  - Add an optional isOptional argument to constructor, default false.
  - Add bool isOptional_ member, initialize to isOptional parameter.
  - Add bool isMatch_ member. Initialize true.
  - Add bool isMatch() accessor. This can be checked after using >> operator.

  - Within the >> operator:

    If (isMatch_) {
       in >> actual
    } else {
       buffer >> actual
    }
    if (actual != label.label_) {
       isMatch_ == false;
       if (isOptional_) {
          put actual into buffer
       } else {
          throw exception
       }
    } else {
       isMatch_ == true;
       clear buffer
    }
    return in;

==========================================================================
class Parameter:

  - Add isOptional optional parameter to constructor, default false.
  - Add isOptional_ member, initialize to isOptional parameter.
  - Add isOptional() accessor. 

==========================================================================
template <typename Type>
class ScalarParam<Type> templates:

  - Add isOptional optional parameter to constructor, default false.

  - Change return type of readParam(std::istream& ) to bool
  - int readParam() {
        Label label;
        in >> label_;
        if (label_.isMatch()) { 
            in >> value_;
            return true;
        } else {
            return false;
        }
    }

==========================================================================
template <typename Type>
class (CArray|CArray2D|DArray|FArray)Param<Type> templates:

  - Change return type to bool (true on success)
  - Change readParam() method similar to above
==========================================================================
ParamComposite:

  - Strategy: 

    1. Make changes to allow for optional ScalarParameter first.
    2. Then allow optional (CArray/Array2D/DArray/FArray) etc. parameters.
    3. Allow optional parameter composites last.

  - Make add<Type> and add(ArrayType)<Type> templates private.

  - Separate instantiation of Parameter objects from addition to list:
    Make the add* methods take an instantiated ScalarParam as a parameter,
    rather than taking a label and value and instantiating it themselves.

  - Change the read*<Type> methods to instantiate a ScalarParam object,
    then call its readParam() method, and then add it only if readParam
    returns true. 

  - Change the load*<Type> methods accordingly.

  - Later: Default implementation of ParamComposite::readParam() would 
    check if the class label matched and return immediately if did not.
