A Simulation currently has:
   
   Storage: atomStorage, GroupStorage containers

   Boundary

   Types:         
      nAtomType_, nBondType_, ....
      AtomTypes

   Potential / Force Field:

      Potential styles:   .....
      Potential classes:  pair, bond, angle, ...
      MaskedPairPolicy 

   Communication Utilities:
      Domain
      Exchanger
      Buffer

   RNG

   ConfigIo
   Integrator

   Properties:    kinetic energy, stress, etc.
             

-----------------------------------------------------------------------
Proposed Smaller Classes, Alternative #1:

   Idea: Define a PotentialManager that is basically a chemical force 
   field plus associated Group storage objects.


   2) PotentialManager (aka ForceField)

      nAtomType           
      AtomTypes  (Note: includes charge, which is part of force field)
      Potential classes 
      MaskedPairPolicy
      Potential factory

      Each covalent potential has:
        - nGroupType (e.g., nBondType, nAngleType, etc.)
        - style string
        - GroupStorage<N>

      Comments:

        - Make PotentialManager a subclass of Manager<Potential>

        - Make the relevant storage a member of the potential.

        - Example of the parameter file format

          BondPotential<HarmonicBond> {
             nBondType  .....
             Interaction parameters
             BondStorage{
             }
          }

        - Create a PotentialFactory that reads the first line to 
          determine the type of the potential, and that separates
          the generic type and style if it is one of the generic
          potential types. If it is one of the generic types, pass
          the style string to a more specialized factory, e.g., a
          BondPotentialFactory. 

   A Simulation has:
     
      - AtomStorage
      - Boundary
      - PotentialManager (PairPotential, BondPotential, etc.)
      - Communication Utilities:
         Domain
         Exchanger
         Buffer
      - Random
      - ConfigIo
      - Integrator
      - AnalyzerManager
      - ModifierManager
   
-----------------------------------------------------------------------
Proposed Smaller Classes, Alternative #2:

  Idea: Put all storage classes into one object called a Configuration.

  A Simulation has:

      - Configuration
        - Boundary
        - AtomStorage
        - List of GroupStorage<N> objects
        - ConfigIo
        - ConfigIoFactory

      - ForceField or PotentialManager
        - nAtomType           
        - AtomTypes  (Note: includes charge, which is part of force field)
        - Potential classes 
        - MaskedPairPolicy
        - Potential factory

      - Communication Utilities:
         Domain
         Exchanger
         Buffer

      - Integrator
        - AnalyzerManager
        - ModifierManager

      - Random

Comments:

    1) Configuration and ForceField are logically separate.

       -> Force field members don't change during simulation, 
          are all set in the parameter file
       -> Configuration data is all in the configuration file
       -> Configuration only requires nType values for validity checking. 

    2) Force field members don't change during simulation. 

    3) Force field does all force / energy calculations using an 
       association with a Configuration. 

       -> Add "hasConfiguration" member to check association.
       -> Only allow association after both initialized.

    4) Problem: Potentially hard codes the allowed types of storage, 
       thus hard coding the form of the potential. This is appropriate
       for a code that will always use a standard form for the
       force field, but not for a code that is intended to be more
       generic. 

    5) Possible solution: Use templates to define an interface
       for GroupStorage units, and allow them to be added to 
       the configuration by the associated potential.
       The configuration would then hold one AtomStorage and
       a set of pointers to GroupStorage units. This would allow
       the existence of more than one type of GroupStorage<N>
       units each value of N.

    6) Potential problem: This is arguably too generic. We need
       a way to implement analyzer and modifier algorithms that
       know which potential is the pair potential, which is the
       bond potential etc. Need a way to register a potential
       as, e.g., the pair potential, and provide access to the more 
       specialized interface of that potential via a PairPotential
       pointer.

    7) Possible solution: Let ForceField provide accessors for
       specific potential types, as done currently by Simulation.

