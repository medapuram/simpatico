A Simulation has:

   
   Storage: atomStorage, GroupStorage containers

   Boundary

   Types:         
      nAtomType_, nBondType_, ....
      AtomTypes

   Potential / Force Field:

      Potential styles:   .....
      Potential classes:  pair, bond, angle, ...
      MaskedPairPolicy 

   Communication Utilities:
      Domain
      Exchanger
      Buffer

   RNG

   ConfigIo
   Integrator

   Properties:    kinetic energy, stress, etc.
             

Proposed Smaller Classes:

    1) Storage -> composite of storage classes 

       -> Only requires nType values for validity checking. 
       -> Configuraiton needs parameters only for allocation.
       -> Add Configuration::isEmpty member to check if initialized.

    2) ForceField:

       nAtomType              
       AtomTypes  (Note: includes charge, which is part of force field)
       nBondType, nAngleType  
       potential style strings
       MaskedPairPolicy
       Potential classes      
       Potential factory classes

       Could ALSO have GroupType<N>, but this is not necessary.

       Kinetic energy and stress must be calculated, also make members.
      
Comments:

    1) Configuration and Force Field can be initialized separately.

    2) Force field members don't change during simulation. 

    3) Force field does all force / energy calculations using an 
       association with a Configuration. 

       -> Add "hasConfiguration" member to check association.
       -> Only allow association after both initialized.

Other categories:

    1) Communication classes: Buffer, Exchanger, Domain 
    2) RNG

-------------------------------------------------------------------
Class Hierarchy for Interactions, Potentials, ForceFields:

      Hierarchy #1)
      -------------

       DdMd::IPotential      Inter::IPairInteraction         
                     \          /                  \               
                  DdMd::PairPotential             McMd::MdPairPotential
                          |                               | 
               DdMd::PairPotentialImpl<T>      McMd::MdPairPotentialImpl<T>


       Advantage:    Avoids repeated declaration of IPairInteraction in McMd and DdMd
       Disadvantage: Does not avoid repeated declaration of IPairPotential.

       No need for a pointer to a IPairInteraction, but is conceptually well defined.

      Hierarchy #2)
      -------------

       DdMd::IPotential    Inter::IPairInteraction            
                   \           /             \                      
               DdMd::PairInteraction       Inter::PairInteractionImpl<T>   
                              \               /           
                          DdMd::PairPotentialImpl<T>

     
       Advantage:    Avoids repetition of IPairInteraction interface and implementation.
       Disadvantage: Multiple inheritance with diamond topology.

       This would require virtual inheritance of Inter::IPairInteraction. 
