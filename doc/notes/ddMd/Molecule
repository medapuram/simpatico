Idea: Add optional mechanism for keeping track of relationships between atoms 
and molecules.

-----------------------------------------------------------------------------
class AtomContext
{
   int speciesId;    \\ index of species
   int moleculeId;   \\ index of molecule within species
   int atomId;       \\ index of atom within molecule
   Molecule* molPr;  \\ index of molecule within storage
}

-----------------------------------------------------------------------------
class Molecule 
{

public:

   void setSpecies(Species& species);

   add(Atom& atom);

   remove(Atom& atom);

   Atom* findAtom(int atomId);

   begin(MoleculeIterator& );

   Species& species();

private:

   /// Map of atom ids to Atoms.
   std::map<int, Atom*> ptrs_;

   /// Pointer to parent Species.
   Species& speciesPtr_;

   /// Number of atoms currently in this system.
   int nAtom_;

}

-----------------------------------------------------------
class Species
{

   Species(Array<Molecule> molecules);

   /// Add molecule to this Species.
   void add(Molecule& molecule);

   /// Remove molecule from this Species.
   void remove(Molecule& molecule);

   /// Return pointer to molecule or null.
   Molecule* findMolecule(int id);

private:

   std::map<int id, Molecule* moleculePtr>; 
  
   int id;

};

-----------------------------------------------------------
class MoleculeReservoir {

   Molecule* pop();
   void      push();

   int capacity();
   int size();

   Molecule* data();

private:

   DArray<Molecule>     molecules_;
   ArrayStack<Molecule> reservoir_;
}

-----------------------------------------------------------------
Todo (Steps):

   Add AtomContext to Atom class.
   Add AtomContext IO to at least one file formats.

   Write class Molecule;
   Write class MoleculeReservoir;
   Write class Species;
   Add DArray<Species> and MoleculeReservoir to AtomStorage;
   Modify AtomStorage methods to keep track of molecules:
      On addition, add to molecule (if first, add molecule).
      On removal, remove from molecule (if last, remove molecule).
   Return Species
   Write class Species::MoleculeIterator
   Write class Molecule::AtomIterator
