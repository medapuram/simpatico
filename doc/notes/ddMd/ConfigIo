Currently:

  ConfigIo::associate takes 
    - GroupStorage<N>, save pointer
    - Associates storage with GroupDistributor<N> member
    - Associates storage with GroupCollector<N>   member

  Required interface:

  ConfigIo:

    - GroupDistributor<N>::initialize()
    - GroupCollector<N>::allocate()

  DdMdConfigiIo:

   - void GroupDistributor<N>::setup()
   - Group<N>* GroupDistributor<N>::newPtr()
   - void      GroupDistributor<N>::add()
   - void      GroupDistributor<N>::send()
   - void      GroupDistributor<N>::receive()

--------------------------------------------------------------------------
Comments:

   - Interface is generic except for pointer to Group<N>* from newPtr.

   - File IO and communication only requires information about integer
     atom Ids. The required functionality of Group<N> could be encapsulated
     in a class IntGroup with an int array of variable length. 

--------------------------------------------------------------------------
Proposal:

   - Change GroupDistributor and GroupCollector to non-template classes that
     implement the interfaces:

     GroupDistributor:
     void associate(Domain& , GroupExchanger&, Buffer& )
     void setup();
     void getNewGroup(GroupReference& group);
     void add();
     void send();
     void receive();
     int  groupSize() const;
  
     GroupCollector:   
     void associate(Domain& , int N, GroupExchanger&, Buffer& )
     void setup();
     void getNewGroup(GroupReference& group);
     void add();
     void send();
     int groupSize() const;

   - Change implementation of GroupDistributor and GroupCollector classes to use 
     GroupReference objects rather than Group<N>* pointers or iterators.
 
   - In GroupCollector, use GroupExchanger::getGroup(GroupReference& group, int id) 
     function inside a simple for (int = 0; ...) loop rather than an GroupIterator.

