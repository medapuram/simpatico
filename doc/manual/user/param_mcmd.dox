/*! \page user_param_mcmd_page 2.3.2 mdSim and mcSim Parameter Files

\ref user_param_syntax_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_ddmd_page (Next)
<BR>

The parameter file formats for mdSim and mcSim simulations are similar in many respects, and so will be discussed together.  

\section user_param_mcmd_mcExample_section Example (for mcSim):
An example of a parameter file for an mdSim molecular dynamics simulation was shown on the previous page. Here is a corresponding example for an mcSim Monte Carlo simulation:
\code
McSimulation{
  FileMaster{
    commandFileName                 commands
    inputPrefix                          in/
    outputPrefix                        out/
  }
  nAtomType                                2
  nBondType                                1
  atomTypes                      A       1.0
                                 B       1.0
  maskedPairPolicy                MaskBonded
  SpeciesManager{

    Homopolymer{
      moleculeCapacity                      50
      nAtom                                  8
      atomType                               0
      bondType                               0
    }

    Homopolymer{
      moleculeCapacity                      50
      nAtom                                  8
      atomType                               1
      bondType                               0
    }
  }
  Random{
    seed                           13451892
  }
  McSystem{
    pairStyle                        LJPair
    bondStyle                  HarmonicBond
    McPairPotential{
      epsilon               1.000000000000e+00  1.300000000000e+00
                            1.300000000000e+00  1.000000000000e+00
      sigma                 1.000000000000e+00  1.000000000000e+00
                            1.000000000000e+00  1.000000000000e+00
      cutoff                1.122460000000e+00  1.122460000000e+00
                            1.122460000000e+00  1.122460000000e+00
      maxBoundary                 cubic  10.5 
    }
    BondPotential{
      kappa                 2.000000000000e+03
      length                1.000000000000e+00
    }
    EnergyEnsemble{
      type                  isothermal
      temperature           1.000000000000e+00
    }
    BoundaryEnsemble{
      type                  rigid
    }
  }
  McMoveManager{

    HybridMdMove{
      probability           0.002000000000e+00
      nStep                                 20
      MdSystem{
        MdPairPotential{
          maxBoundary                 cubic  10.5 
          PairList{
            atomCapacity                        1000
            pairCapacity                       10000
            skin                  3.000000000000e-01
          }
        }
        NveVvIntegrator{
          dt                    5.000000000000e-03
        }
      }
    }

    AtomDisplaceMove{
      probability           0.479000000000e+00
      speciesId                              0
      delta                               0.05
    }

    AtomDisplaceMove{
      probability           0.479000000000e+00
      speciesId                              1
      delta                               0.05
    }

    CfbReptationMove{
      probability           0.020000000000e+00
      speciesId                              0
      nTrial                                20
      hasAutoCorr                            0
    }

    CfbReptationMove{
      probability           0.020000000000e+00
      speciesId                              1
      nTrial                                20
      hasAutoCorr                            0
    }

  }
  DiagnosticManager{
    baseInterval                        1000

    LogProgress{
      interval                         10000
    }

    DumpConfig{
      interval                         1000
      outputFileName            dump/config.
    }

    McEnergyOutput{
      interval                          1000
      outputFileName                  energy
    }

    RadiusGyration{
      interval                          1000
      outputFileName          RadiusGyration
      nSamplePerBlock                     10
      speciesId                            0
    }

  }
  writeRestartInterval             10000
  writeRestartFileName           restart
}

\endcode

\section user_param_mcmd_overview_section Overview
In outline, the structure for an mcSim file for the default the code (without angle, dihedral or external potentials) is:
\code
McSimulation{
  FileMaster{ ... }
  nAtomType    [int]
  nBondType    [int]
  atomTypes    [string (name)]   [float (mass)]
               ...
  maskedPairPolicy   [string]
  SpeciesManager{ ... }
  Random{ ... }
  McSystem{ ... }
  McMoveManager{ ... }
  DiagnosticManager{ ... }
  writeRestartInterval  [int]
  writeRestartFileName  [string]
}
\endcode
The corresponding format for an mdSim file is:
\code
MdSimulation{
  FileMaster{ ... }
  nAtomType    [int]
  nBondType    [int]
  atomTypes    [string (name)]   [float (mass)]
               ...
  maskedPairPolicy   [string]
  SpeciesManager{ ... }
  Random{ ... }
  MdSystem{ ... }
  DiagnosticManager{ ... }
  writeRestartInterval    [int]
  writeRestartFileName    [string]
}
\endcode
The two formats are similar in most respects. The most important differences are:

  - The main block for an mcSim simulation is an McSimulation block, while the main block for an mdSim simulation is an MdSimulation block.

  - For mcSim, the main McSimulation block contains an McSystem subblock, whereas for mdSim, the main block contains an MdSystem subblock.

  - For mdSim, the MdSystem block contains a polymorphic subblock associated with the molecular dynamics integrator, which must be a subclass of McMd::MdIntegrator. There is no analogous subblock in the MdSystem block of an mcSim param file. 

  - For mcSim, the McSimulation block contains a McMoveManager subblock that contains polymorphic subblocks associated with different Monte Carlo moves (subclasses of McMd::McMoves). There is no analogous block in an mcSim param file. 

The following parameters appear in the main block in the format for either type of simulation:
<ul>
<li> nAtomType: The number of atom types, which are indexed by an integer index with values 0, ...,  nAtomType - 1. </li>
<li> nBondType: The number of bond types, which are indexed by an integer index with values 0, ...,  nBondType - 1. </li>
<li> atomTypes: atomTypes is an array of values of type McMd::AtomType. The string representation of each atom type consists of a string label (e.g., "A" or "B") followed by a floating point value for the atom mass. </li>
<li> maskedPairPolicy: Determines if nonbonded pair interactions between bonded atoms are "masked" (i.e., suppressed), or included. See below for further discussion.
<li> writeRestartInterval: The interval, in MD time steps or attempted MC moves, between time steps when a restart file is written.
<li> writeRestartFileName: The base name used for the restart file.
</ul>
The writeRestartInterval and writeRestartFileName parameters are discussed in more detail \ref user_restart_page "here".

\section user_param_mcmd_maskPairPolicy_section MaskedPairPolicy
The parameter maskedPairPolicy is represented internally by an instance of the enum McMd::MaskPolicy. This can have values MaskBonded or MaskNone, which are represented in the parameter file by strings "MaskBonded" or "maskBonded" and "MaskNone" or "maskNone", respectively. The value "MaskBonded" indicates that nonbonded pair interactions between bonded atoms should be suppressed or "masked", i.e., there should be no non-bonded pair interaction between pairs of atoms that are directly connected by a two-body covalent bond. The value "MaskNone" indicates, conversely, that the nonbonded pair interaction should operate between any two atoms that are separated by a distance less than the appropriate pair potential cutoff length.

\section user_param_mcmd_filemaster_section FileMaster
The FileMaster block is associated with an instance of the class Util::FileMaster. This block contains several string parameters that specify locations of input and output files. The string "commandFileName" is the name of the command file that controls program execution after the parameter file is processed. The "inputPrefix" string is prepended to the names of input configuration files and other input files. The "outputPrefix" string is predended to the names of most output files. 

Input and output files can be placed in separate directories by giving directory names for these two prefixes, in which case the prefix strings should end with a backslash (directory separator). In the above example, by setting "inputPrefix" to "in/" and "outputPrefix" to "out/", we have specified that input files should be read from subdirectory "in" and output files should be written to a subdirectory named "out".

\section user_param_random_section Random
The Random block is associated with a Util::Random object.  The only parameter this block is a "seed" for the Mersenne-Twister random number generator. The seed value must be an unsigned (non-negative) 32 bit integer, in the range 0 <= seed < 4294967296.

\section user_param_mcmd_species_manager_section SpeciesManager
The SpeciesManager block contains a sequence of one or more polymorphic blocks, each of which contains the appropriate file format for a subclass of McMd::Species. Each such subclass describes a different class of molecules, and so requires a different file format. Instances of the base class McMd::Species use a file format that is flexible enough to describe any molecular structure. 

\section user_param_mcmd_diagnostic_manager_section DiagnosticManager
The DiagnosticManager block contains a single integer parameter named baseInterval, followed by a sequence of polymorphic blocks associated with subclasses of McMd::Diagnostic.  Most subclasses of McMd::Diagnostic implement an operation that calculates one or more physical properties and either outputs data or carries out a statistical analysis, or both. Each diagnostic has an parameter named "interval" that specifies how often this operation should be invoked: Each diagnostic is invoked when the global step counter is an integer multiple of its interval parameter. The interval for each diagnostic must be a multiple of baseInterval.

\section user_param_mcmd_mcsystem_section McSystem and MdSystem
The format for an McSystem subblock of an MdSimulation is:
\code
  McSystem{
    pairStyle      [string]
    bondStyle      [string]
    McPairPotential{ ... }
    BondPotential{ ... }
    EnergyEnsemble{ ... }
    BoundaryEnsemble{ ... }
  }
\endcode
The format for an MdSystem subblock of an MdSimulation block is:
\code
  McSystem{
    pairStyle      [string]
    bondStyle      [string]
    MdPairPotential{ ...  }
    BondPotential{ ...  }
    EnergyEnsemble{ ...  }
    BoundaryEnsemble{ ...  }
    MdIntegrator{ ...  }
  }
\endcode
In the above description of the MdSystem block, MdIntegrator{ ... } denotes a polymorphic block that must contain the file format for a subclass of the McMd::MdIntegrator base class.

The only differences between an MdSystem block and an McSystem block are thus:
  
  - An MdSystem contains an MdPairPotential block (McMd::MdPairPotential) where an McSystem contains an McPairPotential block (McMd::McPairPotential).
 
  - An MdSystem block contains an additional polymorphic McMd::MdIntegrator block.

The both types of System, values of the pairStyle and bondStyle parameters are strings that specify the names of "interaction" classes that implement specific potential energy functions for nonbonded pair and covalent bond potentials, respectively. Interaction classes for non-bonded pair interactions are in the src/inter/pair directory. Interaction classes for bond potentials are in the src/inter/bond directory. For executables in which angle, dihedral, and/or external potentials have enabled (these are all disabled by default) these two "style" variables would be followed by "angleStyle", "dihedralStyle" and/or "externaStyle" string variables, as appropriate. 

\section user_param_mdpair_section Pair Potentials

MC and MD simulations use the same potential classes for all covalent bond potentials, and for angle, and dihedral, and external potentials (if enabled). Different classes are used to evaluate pair potentials, because different data structures are used to keep track of neighbors in MC and MD simulations. The McMd::McPairPotential class uses a cell list (a instance of McMd::CellList), while an MdPairPotential uses a Verlet pair list (an instance of Util::PairList). The McMd::PairList class also uses an internal cell list, which is used periodically rebuild the pair list, but is not used for force or energy calculations.

In an McSystem, the McPairPotential subblock contains the parameters required by a specific pairStyle (in this case, by the LJPair style), followed by a maxBoundary parameter. The maxBoundary parameter describes the dimensions of the largest expected dimensions of the periodic boundary.  The maxBoundary parameter is used to allocate memory for a cell list before the simulation begins. Only enough memory is allocated for the number of cells required for the boundary condition specified by maxBoundary, using a cell size that must be at least as large as the largest pair potential cutoff parameter.  In NVE and NVT simulations, maxBoundary can safely be chosen to be equal be equal to the actual rigid boundary (which is specified in an input configuration file). In NPT and NPH simulations, however, maxBoundary must be chosen large enough to guarantee that adequate memory is allocated to accomodate any fluctuation in system size that may occur during a simulation. The CellList does not occupy a large amount of memory, so their is little cost in choosing a maxBoundary that is larger than is likely to be needed. 

In an MdSystem, the MdPairPotential block contains the same parameters as for an McPotential, followed by additional parameters required to construct a Verlet pair list. The format is:
\code  
   MdPairPotential{
      (Interaction parameters)
      maxBoundary   [string (boundary type)]  [float (dimension)] ...
      PairList{ ... }
   }
\endcode
The format of the PairList subblock is:
\code
      PairList{
        atomCapacity    [int]
        pairCapacity    [int]
        skin            [float]
      }
\endcode
The value of atomCapacity is the maximum number of distinct atoms.  The value of pairCapacity is the maximum number of distinct pairs within the Verlet list cutoff range. The Verlet list cutoff range is given by the sum of the largest pair potential cutoff plus the value of the "skin" parameter. 

The pair list in an MD simulation is rebuilt whenever one or more atoms in the simulation has moved a distance skin/2 or greater since the last time the pair list was rebuilt.  Increasing the value chosen for the "skin" parameter will thus generally cause the pair list to be rebuilt less frequently, but will increase the number of pairs retained in the pair list, and thus increase the cost of evaluating nonbonded forces that once every time step. There is thus an optimum value for each system. If the optimum value is not adequately known from previous experience, it can be identified by timing a few short trial simulations on a particular system with different values for the skin parameter.

\section user_param_mcmd_ensemble_section Energy and Boundary Ensembles
The EnergyEnsemble and BoundaryEnsemble blocks are associated with instances of Util::EnergyEnsemble and Util::BoundaryEnsemble respectively. The EnergyEnsemble block specifies the type of statistical ensemble for energy fluctuations, which can be "adiabatic" (i.e., constant energy) or "isothermal". If the ensemble type is isothermal (as in the above example for mcSim), this this block must also contains a "temperature" parameter. Only "isothermal" makes sense for an MC simulation, but "adiabatic" ensemble is used for MD integrators that conserve energy or (for constant pressure ensembles) enthalpy. For isothermal simulations, temperature is specified as a value for kT, in units of energy. The BoundaryEnsemble block has a type parameter that can be either "rigid" (i.e., constant volume) or "isobaric". If this type is isobaric, the type parameter must be followed by a "pressure" parameter whose value specifies the target pressure in units of energy per volume.

<BR>
\ref user_param_syntax_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_page (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_ddmd_page (Next)

*/
