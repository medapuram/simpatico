namespace McMd
{

/*! \page user_param_page 2.3 Parameter File

All of the Simpatico programs use parameter files with a heirarchical file format. Each parameter file contains a set of nested blocks that begin and end with matched curly brackets, like blocks in a C program.  The parameter files required by the three programs mcSim, mdSim and ddSim use a similar syntax, but differ in many details. 

As an example, we show a complete parameter file for a simple constant energy (NVE) MD simulation, for use with the default version of mdSim.  Other example parameter files for mdSim, mcSim and ddSim can be found in the simpatico/examples/ directory. 

\section param_example_section Example: mdSim parameter file 
\code
MdSimulation{
  FileMaster{
    commandFileName               commands
    inputPrefix                        in/
    outputPrefix                      out/
  }
  nAtomType                              2
  nBondType                              1
  atomTypes                              A   1.000
                                         B   1.000
  maskedPairPolicy              MaskBonded
  SpeciesManager{

    Homopolymer{
      moleculeCapacity                     100
      nAtom                                  8
      atomType                               0
      bondType                               0
    }

    Homopolymer{
      moleculeCapacity                     100
      nAtom                                  8
      atomType                               1
      bondType                               0
    }

  }
  Random{
    seed                           10742892
  }
  MdSystem{
    pairStyle                        LJPair
    bondStyle                  HarmonicBond 
    MdPairPotential{
      epsilon               1.000000000000e+00  1.500000000000e+00
                            1.500000000000e+00  1.000000000000e+00
      sigma                 1.000000000000e+00  1.000000000000e+00
                            1.000000000000e+00  1.000000000000e+00
      cutoff                1.122460000000e+00  1.122460000000e+00
                            1.122460000000e+00  1.122460000000e+00
      maxBoundary           cubic       12.000   
      PairList{
        atomCapacity                        1000
        pairCapacity                       10000
        skin                  2.500000000000e-01
      }
    }
    BondPotential{
      kappa                 4.000000000000e+02
      length                1.000000000000e+00
    }
    EnergyEnsemble{
      type                        adiabatic
    }
    BoundaryEnsemble{
      type                            rigid
    }
    NveVvIntegrator{
       dt                   5.000000000000e-03
    }
  }
  DiagnosticManager{
    baseInterval                          10

    LogProgress{
      interval                          1000
    }

    DumpConfig{
      interval                          1000
      outputFileName                   dump/
    }

    MdEnergyOutput{
      interval                          1000
      outputFileName                  energy
    }

  }

}
\endcode

\section param_format_section Syntax

A Simpatico parameter file, such as the above example, contains of a set of nested blocks. Each block is delimited by lines containing opening and closing curly brackets, much like the structure of a C program. Each block may nested subblocks, as
well as lines that give values for individual simulation parameters.  Each sub block or parameter value is preceded by a text label. The order of appearance of elements within each block is generally fixed. If the expected label for a parameter or sub-block is not found at the expected position in the file, the program will output a message indicating the nature of the error (i.e., what label was expected and what label was actually read) and then halt execution. 

The nesting of parameter blocks in this file format reflects a hierarchical organization of C++ objects that is used in the program design. Each block corresponds to a specific C++ object. These C++ objects are organized into a hierarchy in which each object can have any number "child" objects.  Every object except the root object has one "parent". A "child" object is generally either a member of its parent object or a dynamically allocated object that the parent is responsible for creating and destroying. Each object in this hierarchy is responsible for reading an associated block in the parameter file, which contains all the parameters necessary to initialize that object, and must also invoke the functions that read parameter blocks associated with its children.  The root node of this herarchy is the main simulation object, which is always an instance of McMd::McSimulation (for mcSim simulations), McMd::MdSimulation (for mdSim) or DdMd::Simulation (for ddSim).

Each block in a parameter file begins with a line containing a class name, which is the class of the associated C++ object, followed by an opening brace ("{"). No white space may appear between the class name and the opening brace.  For example, the block that initializes the "MdSystem" object in the above example begins with the line "MdSystem{".  Each block ends with a line containing only a matched closing brace (i.e., "}").  By convention, nested blocks are indented, but indentation and additional white space are actually ignored when the file is parsed.  The main block, which contains all the others, is associated with the main simulation object.

The value of each parameter that is represented by a primitive C++ variable (e.g., an int, double, or bool) or by a std::string is given on a single line that contains a label followed by a parameter value. Each parameter is stored in a member variable of the enclosing class. By convention, each parameter label is the same as the name of the associated class member variable, except that the parameter labels does not contain the trailing underscore that is appended to the names of private class member variables.  For example, the number of atom types in an MdSimulation is given by private member variable named nAtomType_, which is indicated in the parameter file by a label "nAtomType".  Label names (like C++ variable names) may not contain white space.  

Some parameters correspond to variables that instances of non-primitive data types, such as enumerations or small classes.  The value of each such variable is also given on a single line containing a label followed by a text representation of the value.  In these cases, the text representation of the "value" of the variable must be defined by iostream extractor (>>) and insertor (<<) operators defined for that data type.  For example, in the above file, the "type" member of the EnergyEnsemble object is an instance of the enumeration EnergyEnsemble::Type. This enum can have values ADIABATIC (constant energy) or ISOTHERMAL (constant temperature).  The value of this variable is read by an overloaded extractor (>>) operator that recognizes both "adiabatic" or "ADIABATIC" as valid string representations of one of the allowed enum values.

Some parameters are stored internally in one-dimensional (1D) arrays. A 1D array of parameters is represented in the parameter file by a sequence of lines in which the first line contains the label (the name of the array) and the value of the first element, while subsequent lines contain values of subsequent elements.  Thus, for example, the atomTypes member of an MdSimulation is an array that contains nAtomType instances of class AtomType. The string representation of an AtomType, which is defined by the extractor (>>) operator for an AtomType, contains a name string ("A" or "B" in this example) followed by a floating point mass. (The mass is 1.0 for both of the types in this example). The number of elements in such an array must be known before the array is read, and is passed as a parameter to the function that reads an array of parameters. In this case, the number of elements in the atomTypes array is given by the value of "nAtomType", which appears before the "atomTypes" array in the file format.

Variables that are stored in two-dimensional arrays or Matrix objects also use a multi-line format. In this case, the first line contains a label (the name of the associated matrix), followed by the elements of the first row, with subsequent rows on subsequent lines. In the above example, this format is used for the epsilon, sigma, and cutoff members of an LJPair pair potential object, which are each 2 x 2 matrices in this example. Each of these parameters is represented internally as a two dimensional array, in which epsilon[i][j] is the value of the Lennard-Jones epsilon parameter for interactions between atoms of types i and j, for 0 < i, j <= nAtomType.

The meaning of most parameter labels should be self-explanatory. When they are not, the file format makes it relatively easy to look up the meaning of the variable in the html documentation or source code: Each parameter in this file format is labelled by the name of an associated member variable of a class. The relevant class is given by the class name in the first line of the intermost enclosing block, preceding the curly bracket. The meaning of any parameter can thus be looked up by looking up the relevant member variable in the html documentation and/or *.h header file of the enclosing class. 

To use this file format, helps to to know a little about how it is parsed. As already noted, each block in a parameter file is associated with an object that is an instance of a class that is identified in the file format.  Each such class is a subclass of the abstract base class Util::ParamComposite. Each such class (with a few exceptions) redefines the virtual method Util::Paramcomposite::readParameters(std::istream&) that reads the body of the parameter file block. The implementation of the
readParameters() method defines the order in which individual parameters and any nested sub-blocks must appear in the associated parameter file block. The most reliable documentation of the file format for each parameter file block is thus the source code of the its readParameters() method.  An explanation of the programming conventions used the readParameters() methods is given \ref developer_param_page "here".  



\section manager_section Manager Classes

The above example file contains blocks labelled "SpeciesManager" and "DiagnosticManager", which are examples of Manager classes.  A Manager is a container that holds an array of pointers to dynamically allocated objects that are all instances of subclasses of specific base class. Thus, for example, a SpeciesManager has an array  of Species* pointers to Species objects (i.e., instances of the Species base class or its subclasses) that represent different molecular species within a mixture. A DiagnosticManager contains an array of pointers to Diagnostic objects that will be used for data analysis and/or data output during a simulation. A Monte Carlo simulation also has an McMoveManager that contains an array of pointers to McMove objects that implement different Markov MC moves.

The parameter file block associated with a Manager class contains a sequence of subblocks, separated by spaces. Each subblock may contain the file format for any known subclass of the associated base class. A Manager block may contain any number of such blocks, and terminates when the closing bracket is encountered. Thus for example, the DiagnosticManager block may contain blocks associated with any number of diagnostics classes that the user wants to use during a simulation. The parameter file block associated with an DiagnosticManager thus contains sub blocks that represent different subclasses of Diagnostic that should be used for data analysis during a simulation. The readParam method of a Manager class is responsible for reading a sequence of such polymorphic subblocks, instantiating one object of the indicated subclass for each subblock, and appending a base class pointer to each new object to an array of such pointers.  

\section polymorphic_section Polymorphic Blocks

The parameter file blocks nested within a Manager block are "polymorphic" blocks. A polymorphic block is one that may represent any of several possible subclasses of a particular base class, and may contain the file format appropriate for any such subclass.  The use of polymorphic blocks is the main mechanism used in simpatico to allow a user to use a text file to choose which elements of a simulation (e.g., which integration algorithms, diagnostics, and file formats) should be used in a particular simulation. 

 
There are a few polymorphic blocks outside of the Manager classes, such as the block for the molecular dynamics integrator (MdIntegrator) of an mdSim simulation. In an mdSim simulation, the MdSystem object has one associated MdIntegrator object. The user may specify that this object should an instance of any of several subclasses of MdIntegrator. Among these are NveVvIntegrator, a class that implements an energy conserving NVE velocity-Verlet integrator, or  NvtNhIntegrator, an isothermal NVT Nose-Hoover integrator. If an NveVvIntegrator block is encountered at the place expected for a polymorphic MdIntegrator block, as in the above example file, the parent MdSystem will create and initialize an NveVvIntegrator object.  To indicate that an NvtNhIntegrator was desired instead, this block in the parameter file could be changed to contain the file format for an NvtNhIntegrator, which would begin with the line "NvtNhIntegrator{". Different file formats and parameters are used for different subclasses: For example, the format for an NvtNhIntegrator contains a parameter that controls the strength of the coupling of the system to a heat reservoir, which is not needed in an NveVvIntegrator. 

To read a polymorphic block, the method of the parent object that parses its parameter file block must: (1) read the first line of the sublock, and extract the name of the desired subclass, (2) compare the subclass name to a list of known subclasses, (3) create an instance of the desired subclass, which is assigned to a base class pointer, or throw an Exception if the class name is not recognized, and (4) call the readParameters method of the new object to read the body of the polymorphic parameter file block. The implementation of this algorithm relies on an associated "Factory" class that is responsible steps (2) and (3) of this process, as discussed in more detail \ref extend_factory_page "here".

\section potential_section Potential Energies

In both MD and MC simulations, a System has several associated types of potential energy. By default, these include only a non-bonded pair potential and a bond potential. Other types of potential energy, such as 3-body bond angle and 4-body dihedral potentials, may be enabled (compiled in) by setting associated flags (e.g., INTER_ANGLE and INTER_DIHEDRAL) in the file inter/defines.mk before compiling. 

At run time, the user may choose from among several functional forms for each type of potential energy by specifying a "style" parameter string.  For example, the type of nonbonded pair potential function is specified by the value of the string "pairStyle". This can take on values "LJPair", corresponding to a Lennard-Jones potential, or "DpdPair", corresponding to the soft potential typically used in dissipative particle dynamics (DPD) simulations. Each of the allowed values of this pair style string corresponds to the name of a class in the src/inter/pair directory, which we refer to as pair interction classes. Similarly, "bondStyle" can take on values such as "HarmonicBond" or "FeneBond", which are the names of bond interaction classes in src/inter/bond directory.

In the above example, the "pairStyle" and "bondStyle" parameters appear near the top of the MdSystem block. The parameter file format for a code compiled with angle and dihedral potentials enabled would also contain "angleStyle" and "dihedralStyle" strings to specify choices of angle and dihedral interaction classes. These "style" variables are followed by a set of blocks that contain the parameters for different types of potential energy (pair, bond, etc.). In the above example, these blocks are labelled "MdPairPotential" and "BondPotential". Each of these blocks contains the set of parameters required by the potential energy function specified by the corresponding "style" variable. 

The block associated with a pair potential contain information required to construct the cell list and/or pair list data structures that are used to evaluate pair interactions, in addition to actual interaction parameters. Because different data structures are used in MC and MD simulations, two different classes named McPairPotential and MdPairPotential are used to implement pair potentials in mcSim and mdSim simulations, respectively. In the above example parameter file for an mdSim simulation, the MdPairPotential block contains not only the parameters required by the associated interaction (the epsilon, sigma, and cutoff for the LJPair Lennard-Jones style), but also a parameter labelled maxBoundary and a PairList sub-block. These additional parameters are required to create a Verlet pairlist, which is needed to efficiently compute pair interactions in an MD simulation. The corresponding classes McPairPotential contains parameters that are required to create a cell list, but does not contain a PairList subblock. 

For covalent bonded interactions, the same class is used in mcSim and mdSim simulations. The class name for the object that represents a bond potential is thus simply called BondPotential, rather than MdBondPotential or McBondPotential.  The file format for a code compiled with angle and dihedral potentials would contains subsequent AnglePotential and DihedralPotential blocks. 

Navigation:
<ul style="list-style: none;">
 <li> \ref user_usage_page   (Previous) </li>
 <li> \ref user_page     (Up)   </li>
 <li> \ref user_commands_page  (Next) </li>
</ul>

*/

}
