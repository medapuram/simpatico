/*! \page user_usage_page 2.2 Usage

\ref user_compile_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_page (Next) 
<BR>

This section describes how to execute the simpatico programs mcSim, mdSim and ddSim. The command line interface is similar for all three programs. Differences among the three programs are discussed explicitly below as needed. This page gives instructions for using any of these three programs to simulate a single physical system. Multi-system simulations, such as those used for replica exchange algorithms, are discussed separately (see \ref user_multi_page).

\section usage_inputs Input Files 
A simpatico simulation normally requires the three input files: 
<ul>
   <li> a \ref usage_parameter_section "parameter" file </li>
   <li> a \ref usage_command_section "command" file </li>
   <li> a \ref usage_cfgfile_section "configuration" file </li>
</ul>
The contents and formats of these different types of file are discussed briefly below and in more detail in several separate pages (see \ref user_param_page , \ref user_commands_page and \ref user_cfgfile_page).

When a simulation is executed, the parameter file is read from standard input. The parameter file contains the name of the command file, which is read after the parameter file.  The command file contains a list of commands that are interpreted and executed in sequence. Among these is normally a command that instructs the program to read a specific input configuration file, a command that runs a simulation of a specified number of steps, and a command to write the final configuration to a file. 

\section usage_running_section Running a Simulation 
To run a simulation, one invokes the executable name and reads the parameter file from standard input. For example, to run a single-processor mdSim MD simulation, using a parameter file named "param" in the current working directory, one would enter:
\code
   mdSim < param
\endcode
To run a single-processor MC simulation, one would instead enter "mcSim < param".  During execution, some information is sent to standard output (i.e., the screen). This log output can be directed to a file using, for example, 
\code
  mdSim < param > log
\endcode
Standard output should always be redirected to a file when a job is run in background or in a queue. 

The syntax for executing the parallel ddSim program of a single system is similar, except for the need to run the program as an MPI program. The syntax for starting an MPI job depends on the system configuration and choice of library, but often involves a script called "mpirun". To use mpirun to start a ddSim program on 32 processors, using a parameter file named param in the working directory, one would enter
\code
   mpirun -np 32 ddSim < param > log
\endcode
For a ddSim job, the number of processors declared in the command line (e.g., 32 in this example) must be consistent with the number of processors in the processor grid defined in the Domain block of the parameter file (e.g., a 4 x 4 x 2 grid for a simulation with 32 processors).

The available command line options for each program are discussed \ref section_options "below". A particularly useful option for new users is the "-e" (echo) option, as in 
\code
mdSim -e < param > log
\endcode 
This option causes each line of the parameter file to be echoed to standard output as it is read. It is useful for locating errors in the parameter file syntax, because the echoed output ends immediately before the line at which an error in the parameter file is detected, and is followed by a message explaining the nature of the error. The first line that does not appear is usually the one that causing trouble. 

\section usage_program_section Program structure

The understand the program flow, it helps to look briefly at the structure of the main program. The main program files for single processor MC and MD simulations are src/mcMd/mcSim.cpp and src/mcMd/mdSim.cpp. The main program for parallel MD simulation is src/ddMd/ddSim.cpp. All three programs have a similar structure.  

Here is a slightly simplified (but functional) version of the main program src/mcMd/mcSim.cpp for MC simulations:
\code

int main(int argc, char** argv)
{
   McMd::McSimulation simulation;
  
   \\ Process command line options
   simulation.setOptions(argc, argv);
  
   \\ Read the parameter file from standard input
   simulation.readParam();
  
   \\ Read the command file.
   simulation.readCommands();
  
}

\endcode
This program has only four executable lines:

  - The first executable line creates an object named simulation that is an instance of the class McMd::McSimulation.  An McSimulation object represents a complete Monte Carlo simulation. 

  - The setOptions() method processes any command line options that are passed to the program.  The available command line options are discussed \ref section_options "below".

  - The readParam() method reads a parameter file and initializes the simulation.  Invoking readParam() with no argument (as here) reads the parameter file from standard input. 

  - The readCommands() method reads the command file, and executes each command as it is read. 

The readParam() method does more than read parameters: It is an initialization function that reads parameters, allocates any required memory, and leaves the main simulation object ready for use. The name of the command file is specified in the param file. 

The analogous code for the single-processor MD (mdSim) and parallel MD (ddSim) programs are almost identical. The only difference is that the main object in mdSim.cpp is an instance of McMd::MdSimulation, and the main object in ddSim.ccpp is an instance of DdMd::Simulation.

\section usage_parameter_section Parameter File

The parameter file contains all the data required to initialize a simulation, i.e., to initialize all variables to valid values and to allocate all required memory. This data includes: 

 - Parameters that control how much memory should be allocated for use during a simulation, such as the maximum allowable number of atoms or molecules.
 - Physical parameters such as the temperature and potential energy parameters.
 - Choices of specific simulation algorithms, such as the set of Monte Carlo moves for a MC simulation or the integration algorithm for an MD simulation, and parameters requierd by these algorithms (e.g,. the time step for an MD integrator). 
 - Choices of any desired data analysis and/or data output operations, and associated parameter values. 

In mcSim and mdSim simulations, the parameter file also contains data required to describe molecular species. In ddSim simulations, this information about molecular topology is instead embedded in the configuration file (discussed below). The parameter file also contains the filename for the command file that should be read by the readCommands() method.  Examples of parameter file formats for different types of simulation are shown and discussed \ref user_param_page "here".

\section usage_command_section Command File

The command file contains a sequence of commands that are read and executed in the order they appear. Each line of the command file starts with a capitalized command name, followed by zero or more arguments. The minimal command file for an mcSim simulation looks like this:
\code
READ_CONFIG       config
SIMULATE          100000
WRITE_CONFIG      config
FINISH   
\endcode
This file instructs the program to read a configuration file named "config", run a simulation of 100000 attempted MC moves, write a final output configuration file to a file named "config", and then stop. The command file is read by a loop that terminates when a line containing only the command FINISH is encountered. A full list of valid commands and their arguments is given \ref user_commands_page "here".

Paths for the input and output files specified in the command file are constructed by concatenating input and output prefix strings that are specified in the parameter file (named inputPrefix and outputPrefix) to file names specified in the command file.  The values of these prefix strings are often set to directory name strings, which end with a directory separator symbol "/", in order to place all input files and output files in different directories. The fact that the above example command script uses the same name "config" for both the input and output configuration files thus does not necessarily mean that the script would cause the input configuration file to be overwritten, sinceinput and output files are normally placed in different directories.

\section usage_cfgfile_section Configuration File

A configuration file specifies atomic positions and other characteristics of a system that can change during the course of a simulation. Slightly different information is required by mcSim, mdSim, and ddSim.  A default configuration file format exists for each of the three programs, each of which can also read and write files using a several other file formats.
  
The default configuration file format for mcSim contains the dimensions of the periodic system boundary, the number of molecules of each molecular species, and the positions of all atoms. The default configuration file format for mdSim also contains the atomic velocities. The default file formats for these two programs do not contain any information about molecular topology (i.e., which atoms are connected to which), because this is contained in the param file format for these programs.

The default configuration file format for ddSim contains box dimensions, atomic positions and velocities. Unlike the file formats for mcSim and mdSim, this format also contains structural information about topology, which is given by listing bond, angle and dihedral covalent groups.

Configuration file formats for all programs are described in more detail \ref user_cfgfile_page "here".

\section usage_output_section Output Files

Each simulation writes a limited amount of information to report the progress of the simulation. In simulations of single system, this is written to standard output. It will thus appear on the user's screen unless redirected to a file.  
 
A typical command file contains a command to write a final system configuration to a file.  The parameter file may also specify that the system configuration be dumped to file periodically during a simulation.

A variety of other output files may also be written by classes that implement on-the-fly statistical analyses or data output operations, which we refer to as Diagnostic classes. Each such data analysis and data output class is a subclasses of either the McMd::Diagnostic (for mcSim or mdSim) or DdMd::Diagnostic (for ddSim) base class. The parameter file for each type of simulation specifies a set of Diagnostic objects that should used during a simulation. Each such object carries out a computation and/or outputs data to file at a specified interval. Each Diagnostic writes output to one or more separate files. The path to each such output file is constructed by prepending a common string variable, named outputPrefix, to a base name that is specified in the parameter file block associated with a specific Diagnostic.  

\section section_options Command Line Options

All simpatico simulations of single systems can be invoked with either or both of the following two command line options:
<ul>
  <li> -e: Activates echoing of the parameter file to standard output.</li>
  <li> -r filename: Restarts and continues a previous simulation. </li>
  </li>
</ul>

The -e (echo) option causes each parameter in the parameter file to be echoed to standard output immediately after it is read. This option takes no arguments.

The -r (restart) option takes a required parameter "filename". This is the base name of two input files required to restart a simulation, which have filename suffixes *.rst, (restart file) and *.cmd (restart command file). Restarting is discussed in more detail \ref user_restart_page "here".

Other command line options that are relevant only to multi-system simulations are discussed separately \ref user_multi_page "here". 

<BR>
\ref user_compile_page  (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_page (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref user_param_page (Next) 

*/
