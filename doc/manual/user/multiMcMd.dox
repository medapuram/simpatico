namespace McMd
{

/*! \page user_multi_McMd_page 2.9.1 Multi-system simulations: mcSim and mdSim

The mcSim and mdSim programs can be compiled for use on multiple
processors. The resulting multi-processor versions of these programs
due not divide a single system among multiple processors, as done 
by ddSim, but simply allow a different system to be simulated on 
different processors. This capability can be used for replica 
exchange simulations, for free energy perturbations, or simply as
a way to submit multiple independent simulations as an MPI job. 

\section parallel_compile_sec Compilation

Instructions for compiling the multi-processor versions of mcSim 
and mdSim are given \ref user_compile_page "elsewhere". Briefly, one must
choose compiler settings that link to an MPI library, by choosing
an appropriate value for the COMPILER variable in the file 
src/compiler.mk. 

Choosing an MPI compiler, by itself, only allows one to run several
independent simulations as an MPI job.  To enable free energy 
perturbation and replica exchange algorithms, one must also
uncomment the line "MCMD_PERTURB=1" in the file src/mcMd/defines.mk.
Defining MCMD_PERTURB causes a C++ preprocessor macro of the same 
name to be defined during compilation via a string passed to the 
compiler.

When Simpatico is compiled with mpi and free energy perturbation 
enabled, but no other preprocessor macros defined, the default 
names of the resulting MC and MD executables are mcSim_m_f and 
mdSim_m_f. The _m suffix stands for "mpi" and the _f for "free
energy perturbation".

\section parallel_file_sec Directory Conventions
Conventions for paths to input and ouput file names are different 
for multi-system simulations than those for single-system simulations.
Each processor in an MPI job involving np processors is assigned a 
integer "rank" in the range n = 0, ..., np-1.  In a multiprocessor 
mcSim or mdSim simulation, the input config file and all output files 
associated with a processor with rank "n" are put in a subdirectory 
of the working directory named "n/", e.g., in a directory named "3/" 
for the processor with rank 3 in the MPI communicator. To do this, 
the FileMaster class for processor 3 prepends the string "3/" to the 
paths for all of the input and and output configuration and data 
files used by processor 3, with an analogous convention for other 
processors.

The treatment of parameter and command files in an MPI mcSim or
mdSim job depends upon whether or not the executable is invoked 
with the "-p" command line, which enables free energy perturbation.  
This command line option is only valid if the executable was 
compiled with MCMD_PERTURB defined. 

\section parallel_independent_sec Independent Simulations

To use a parallel version of mcSim or mdSim to run a set of completely
independent simulations, one simply enters the name of the executable
from, such as "mcSim_m_f" or "mdSim_m_f", from a directory that contains 
a set of numbered directories associated with different processors, 
without using the command line option "-p" that invokes the perturbation
theory feature.  In this mode of operation, every processor reads a 
completely different set of param and command files, which are located 
in directory associated with that processor.

Because each processor reads a different param file, it is not possible 
to read the parameter file from standard input, as done single-system
simulations, since that would cause every processor to read the same
file. By convention, the parameter file for processor n in a set of
independent simulations is instead read from the file "n/param". The 
command file processor n is read from a file name obtained by adding 
"n/" as a prefix to the commandFileName given in this parameter file. 
Paths to other input and ouput files are also obtained by adding a 
string "n/" before the inputPrefix or outputPrefix.  

For example: If the inputPrefix is set to "in/" and the outputPrefix 
is set to "out/" in the file "3/param", the command "WRITE_CONFIG config" 
in the command file for processor 3 will cause that processor to read 
the input configuration file "3/in/config", and all of output files 
for processor 3 will be written to the directory "3/out". 

To run independent MC simulations on 3 processors, using an executable 
mcSim_m_f, one might thus enter
\code
    mpirun -np 3 mSim_m_f 
\endcode
from the root directory of a directory tree (i.e., the directory above 
the numbered subdirectories) with a structure
\code
    0/
      param
      commands
      in/
        config
      out/
    1/
      param
      commands
      in/
        config
      out/
    2/ 
      param
      commands
      in/
        config
      out/
\endcode
We have assumed here that the commandFileName pararameter is set to 
the string "commands" in each of the param files.

\section Pertubation Replicated Simulations
Invoking the exectuable mcSim_m_f or mdSim_m_f with the "-p" option instead
runs a "replicated" simulation.  This command line option only functions in 
versions of the code that were compiled with both MPI and perturbation enabled.  
In this mode, "replicas" on several processors are controlled by a single 
parameter file and a single command file, but different parameter values 
are assigned to different processors.  This mode of operation is required
for either free energy perturbation or replica exchange simulations.

For example, to run a MC program in this mode on 3 processors, one might thus 
enter 
\code
    mpirun -np 2 mSim_m_f -p < param
\endcode
from the root directory of a directory tree with a structure
\code
    param
    commands
    0/
      in/
        config
      out/
    1/
      in/
        config
      out/
    2/ 
      in/
        config
      out/
\endcode
assuming that commandFileName=="commands" in the param file. Note 
that in this case the parameter file is read from standard input,
and that only a single command file is used, as in a simulation of 
a single system, but that input configuration files and all output 
files are placed in subdirectories associated with particular 
processors.

The method by which a single parameter file is used to set different
parameter values on different processors involves the use of a 
Perturbation class, and is discussed below.

\section parallel_perturb_sec Perturbation Classes

In a replicated simulation, the master processor reads a parameter 
file, and broadcasts the contents of that file to all the other 
processors. This establishes a baseline set of parameters that are
the same on all processors. The parameter file used in such simulations
must also, however, contain polymorphic block associated with a subclass 
of the McMd::Perturbation abstract base class, which defines how a
sequence of different parameter values should be set on different
processors. This block appears at the end of the block associated 
with the McSystem or MdSystem.

Each subclass of Perturbation defines how a sequence of slightly 
different sets of different physical parameters should be assigned 
to different processors in an MPI communicator. A subclass of
Perturbation may assign different values to different processors 
for any parameters that effect the statistical weight for a 
microstate. This may include macroscopic control parameters such 
as temperature (for constant temperature simulations) or pressure 
(for constant pressure simulations), or parameters in the potential 
energy. The default implementation of the parameter file block 
associated with a Perturbation reads in an array of values for some 
parameter, with a different value is assigned to each processor.  
The implementation of each subclass of Perturbation must define 
how these input parameters should be used to reset values of
one more more of the physical parameters of a simulation. 
Different parameters are set on different processors by first
setting the parameters on all processors to common baseline 
values, which are determined by the value given for quantities 
such as the potential energy parameters and temperature in the 
rest of the parameter block, and then calling a virtual method
of the Perturbation object to reset specific parameters to 
different values on different processors. 

As a simple example of this, McEnergyPerturbation is a subclass 
of Perturbation that sets every processor in an MC simulation 
to a different temperature, or inverse temperature beta, while 
using the same values for all potential energy parameters on 
all processors.  The required values of inverse temperature for 
different processors are input as an array in the parameter 
file block that is read by McEnergyPerturbation::readParam(), 
listed in order of the MPI ranks of corresponding processors.  
The contents of this entire array is broadcast to all 
processors, and each processor then resets its temperature to 
a value obtained from the appropriate elements of the array 
(i.e., processor 4 resets its temperature to the value 
corresponding to element 4 in this array). 

\section parallel_exchange_sec Replica Exchange 

Simpatico provides a replica exchange algorithm, which can be 
used replicated MC simulations with any associated Perburbation. 
The replca exchange algorithm is implemented by the class
McMd::ReplicaMove, which implements a Monte Carlo move that 
exchanges configurations between processors with neighboring 
MPI ranks. Please see the documentation of the "ReplicaMove"
class for further information.

In the parameter file format for a replicated MC simulation, 
the block associated with the Perturbation must be followed by a 
line containing a boolean parameter "hasReplicaMove", which may
take on values 1 (true) or 0 (false). This parameter is required
only in multi-system replicated simulations. If the parameter
"hasReplicaMove" is false (0), it is the last parameter in the
McSystem block. If "hasReplicaMove" is true (1), it must be 
followed by a parameter block associated with the ReplicaMove
class, which contains a single "interval" parameter that 
specifies the interval (in MC steps) between subsequent
attempted MC moves. 

\section parallel_example_sec Example Parameter File
Show below is an example of a parameter file for a replicated
mcSim simulation of a polymer blend, which is simulated on
three processors. This example uses the McPairPerturbation 
subclass of Perturbation to define a sequence of systems with
different values of the epsilon parameter for interactions 
between A and B atoms, and uses a replica exchange move.
The parameter block associated with the McPairPerturbation
and ReplicaMove appear at the end of the McSystem block.

\code
McSimulation{
  FileMaster{
    commandFileName                paramfile
    inputPrefix                          in/
    outputPrefix                        out/
  }
  nAtomType                              2
  nBondType                              1
  atomTypes                    A       1.0
                               B       1.0
  maskedPairPolicy                MaskBonded
  SpeciesManager{

    Homopolymer{
      moleculeCapacity                      50
      nAtom                                  8
      atomType                               0
      bondType                               0
    }

    Homopolymer{
      moleculeCapacity                       50
      nAtom                                   8
      atomType                                1
      bondType                                0
    }

  }
  Random{
    seed                           13451892
  }
  McSystem{
    pairStyle                        LJPair
    bondStyle                  HarmonicBond
    McPairPotential{
      epsilon               1.000000000000e+00  1.000000000000e+00
                            1.000000000000e+00  1.000000000000e+00
      sigma                 1.000000000000e+00  1.000000000000e+00
                            1.000000000000e+00  1.000000000000e+00
      cutoff                1.122460000000e+00  1.122460000000e+00
                            1.122460000000e+00  1.122460000000e+00
      maxBoundary             cubic  10.5 
    }
    BondPotential{
      kappa                 2.000000000000e+03
      length                1.000000000000e+00
    }
    EnergyEnsemble{
      type                  isothermal
      temperature           1.000000000000e+00
    }
    BoundaryEnsemble{
      type                  rigid
    }
    McPairPerturbation{
      parameters            1.000000000000e+00
                            1.150000000000e+00
                            1.300000000000e+00
    }
    hasReplicaMove                             1
    ReplicaMove{
      interval                             2000
    }
  }
  McMoveManager{

    HybridMdMove{
      probability           0.010000000000e+00
      nStep                                100
      MdSystem{
        MdPairPotential{
          maxBoundary             cubic  10.5 
          PairList{
            atomCapacity                        1000
            pairCapacity                       10000
            skin                  3.000000000000e-01
          }
        }
        NveVvIntegrator{
          dt                    5.000000000000e-03
        }
      }
    }

    CfbReptationMove{
      probability           0.990000000000e+00
      speciesId                              0
      nTrial                                20
      hasAutoCorr 0
    }

  }
  DiagnosticManager{
    baseInterval                        1000

    LogProgress{
      interval                         20000
    }

    McWriteRestart{
      interval                          1000
      outputFileName                 restart
    }

    McEnergyAverage{
      interval                          1000
      outputFileName               energyAve
      nSamplePerBlock                     10
    }

    McPairEnergyAverage{
      interval                          1000
      outputFileName              pairEnergy
      nSamplePerBlock                     10
      selector                           inter  -1  -1
    }
   
  }
}
\endcode

Navigation:
<ul style="list-style: none;">
 <li> \ref user_multi_page      (Up)    </li>
 <li> \ref user_multi_DdMd_page  (Next)  </li>
</ul>

*/
}
