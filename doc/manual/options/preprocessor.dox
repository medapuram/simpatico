/*! \page preprocessor_page 4.1 Preprocessor Macros

Several optional features of Simpatico can be conditionally compiled by 
defining preprocessor macros when compiling the code. 

\section System How Preprocessor Macros are Defined

C++ preprocessor macros used in Simpatico fall into groups, depending
on which file they are defined in, and which namespace they effect.
Those whose names begin with UTIL_ are defined in the files 
src/compiler.mk and src/util/defines.mk, and appear in source 
files in all of the Simpatico namespaces (i.e., in the Util, 
Inter, McMd or DdMd namespaces, corresponding to the src/util,
src/inter, src/ddMd, and src/ddMd directories).
Macros with names that begin with INTER_, which are defined in 
src/inter/defines.mk, are not used in the Util namespace (the 
src/util directory), but can appear in the Inter, McMd and DdMd 
namespaces (or the src/inter/, src/mcMd/ and src/dMd/ directories). 
Macros with names that begin with MCMD_, which are defined 
in src/mcMd/defines.mk, are used only in the McMd namespace.
Those whose names begin with DDMD_, which are defined in 
src/dMd/defines.mk, are used only in the DdMd namespace.

All preprocessor macros may be defined by activating a 
line in one the makefile fragments src/compiler.mk, 
src/util/defines.mk, src/inter/defines.mk, src/mcMd/defines.mk 
or src/ddMd/defines.mk that defines a makefile variable with 
the same name as the name of the preprocessor macro. For example,
one can define the macro UTIL_DEBUG throughout the source code, 
by uncommenting the line "UTIL_DEBUG=1$ in src/util/defines.mk.
Defining the makefile variable UTIL_DEBUG causes the makefile 
system to add a string "-DUTIL_DEBUG" to the list of options 
that is passed to the compiler when compiling any source file, 
thus defining the preprocessor macro UTIL_DEBUG throughout the 
source code.

Defining each such preprocessor macro also causes the build
system to add an corresponding suffix to the end of the names
of all libraries and executables that contain code that is
effected by that preprocessor macro. For example, compiling 
mcSim and mdSim with UTIL_DEBUG defined causes a suffix _g to 
be added to the names of all libraries and executables. If no
other macros are defined, entering "make mcMd" from the
src/ directory would create static libraries named libutil_g.a,
libinter_g.a, and libmcmd_g.a in the simpatico lib/ directory 
and executables named mcSim_g.a and mdSim_g.a in the bin/
directory. The use of the suffixes makes it easier for users
to retain several different versions of the executable in the 
same directory, and to invoke different versions by different 
executable file names. You can look in the Simpatico bin/
directory (or wherever you choose to install the executable) 
to see the full names of executable files that you have 
created. 

\section Macros Available Macros

UTIL_ Macros:

  - UTIL_MPI: Define UTIL_MPI to compile any code that is
    designed to run on multiple processors. For mcSim and mdSim, 
    defining UTIL_MPI creates a version of the code in which 
    different systems are simulated on different processors. 
    UTIL_MPI is defined automatically if you choose a value 
    for the COMPILIER variable in the file src/compiler.mk
    that ends in the suffix *_mpi (e.g., gcc_mpi or intel_mpi).
    UTIL_MPI . Suffix string: _m.

  - UTIL_DEBUG: Defining this macro enables many additional internal 
    logic checks that are useful during development, including 
    bounds checking on all of the container class templates. To 
    enable this, uncomment the line that defines "UTIL_DEBUG=1" 
    in src/util/defines.mk.
    Suffix string: _g.

INTER_ Macros (defined in inter/defines.mk):

  - INTER_NOPAIR: Define this to remove all nonbonded pair interactions.
    This also removes all code associated with the calculation of pair
    interactions, and all code for creating and managing Cell and/or 
    Pair Lists.  To disable pair potentials, define INTER_NOPAIR=1 in 
    src/mcMd/defines.mk.
    Suffix string: _np.

  - INTER_ANGLE: Define INTER_ANGLE to enable three-body angle potentials.
    To enable angle potentials, define INTER_ANGLE=1 in src/mcMd/defines.mk.
    Suffix string: _a.

  - INTER_DIHEDRAL: Define INTER_DIHEDRAL to enable four-body dihedal 
    potentials. To enable this, define INTER_ANGLE=1 in src/mcMd/defines.mk.
    Suffix string: _d.

  - INTER_EXTERNAL: 
    Define this to allow the inclusion of an external one-particle 
    potentials, such as a wall or confining potential, in which the
    potential energ of each atom depends on its type and position.
    To enable this, define INTER_EXTERNAL=1 in src/mcMd/defines.mk.
    Suffix string: _e.
 
MCMD_ Macros (defined in mcMd/defines.mk):

  - MCMD_PERTURB: Define this, in addition to UTIL_MPI, to enable 
    free energy perturbation and replica exchange exchange algorithms
    in the parallel versions of mcSim and mdSim. This allows a 
    sequence of systems with slightly different parameters be 
    controlled by a single parameter file, which defines how 
    statistical weight H/kT depends on a parameter (e.g., either
    temperature or a parameter in the Hamiltonian H), and assigns
    a different value of the control parameter to each processor.
    To enable this, uncomment the line that defines MCMD_PERTURB=1 
    in src/mcMd/defines.mk.  Suffix string: _f.

  - MCMD_LINK: Define MCMD_LINK to allow the inclusion of mutable two-body 
    bond potentials that are not included as part of the definitions of 
    molecular species, such as crosslinks between polymers. This enables
    addition of a LinkMaster object to the System object.
    To enable this, define MCMD_LINK=1 in src/mcMd/defines.mk.
    Suffix string: _l.

  - MCMD_SHIFT: Define this to enable the recording of shifts of
    atomic coordinates used to map positions into the periodic unit
    cell in MD (but not MC) simulations. This macro also enables 
    inclusion of the integer shifts in the MdConfigIo configuration 
    file format. This feature allows a user to reconstruct continuous
    trajectories of "true" atomic positions from configuration file
    dumps. This feature only works in MD simulations.
    To enable this, define MCMD_SHIFT=1 in src/mcMd/defines.mk.
    Suffix string: _s.

<ul style="list-style: none;">
 <li> \ref custom_page      (Up)   </li>
 <li> \ref boundary_page  (Next) </li>
</ul>
 
*/
