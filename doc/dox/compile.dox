/*! \page compile_page Compilation

Simpatico is distributed only as source code, and must be compiled by the user. All source code is written in ANSI 1998 standard C++. It has been developed and tested using the gcc and intel compilers in a linux environment, and with the gcc compiler in Mac OS X.  It should compile with any modern, standard compliant C++ compiler.   

The single-processor programs mcSim and mdSim have no external dependencies.  The ddSim program requires a Message Passing Interface (MPI) library to run on multiple processors. An MPI library is also required to compile multiprocessor versions of mcSim and mdSim, for parallel simulations in which different systems run on different processors. 

The build system uses unix makefiles. The code was developed using gnu make (gmake), which is a standard component of in any unix-like environment (linux or Mac OS). We assume that the makefile system would also work using Cygwin on Windows operating system, but have never tried this.

\section getcode_section Getting the Source Code

The source files for Simpatico may be obtained either by downloading a distribution from the program <a href=http://dmorse.github.com/simpatico/index.html>home page</a> or by using git to clone the public <a href=https://github.com/dmorse/simpatico>git repository</a>. Both the repository and the download page are hosted on github.

To clone the repository, after installing git on your home machine, enter:
\code
> git clone git://github.com/dmorse/simpatico.git
\endcode
This should create a copy of the repository in a new subdirectory named simpatico.

If you download a compressed tar file from the download page, extracting the tar file (tar -xvf tarball) will install the source files in a directory named dmorse-simpatico-ID/, where "ID" represents a hexadecimal identifier for the most recent commit in the git repository. We recommend that you rename this directory simpatico/, which is the name of the corresponding directory in a git working tree. 

Throughout this documentation, we assume that the root directory of the simpatico directory tree is named simpatico/.  References to paths in this directory tree that do not start explicitly with "simpatico/" should be understood to be relative paths, relative to the simpatico/ root directory. All header (*.h) and source (*.cpp) files for Simpatico are are in the src/ subdirectory. By default, executable files are installed in the bin/ subdirectory. The contents of the other top-level subdirectories is explained \ref directory_page "here".

The source code does not contain a copy of the html documentation. If desired, you may generate a local copy of the documentation with the <a href=http://www.doxygen.org>Doxygen</a> utility, by following instructions given \ref compile_doc_section "here".

\section configure_section Configuration
Before the first time you compile any of the programs, you must run a configure script from the root simpatico/ directory. You must:

  - Change working directory (cd) to the simpatico/ root directory.

  - Enter "./configure".

The configure script must be entered from within the simpatico root directory. The script creates several configurations files that are required for compilation.  The contents of the resulting configuration files are discussed below (\ref compile_config_section).  The configure script only needs to be invoked once, before the first time you compile any source code.

After running the configure script, inspect the file src/compiler.mk makefile fragment, which is created by the configure script. The value of the variable ROOT_DIR should have been set to the absolute path to the simpatico/ root directory on your machine. 

The COMPILER variable defined in src/compiler.mk chooses from among several different compilers. By default, COMPILER is set to "gcc", which denotes the gnu C++ compiler.  To choose another compiler from among those listed (e.g., the intel compiler), comment out the line defining COMPILER=gcc and uncomment the line that uses the preferred compiler. Compiler names such as gcc_openmpi and intel_mpicxx that contain the string "mpi" denote compiler settings that contain instructions regarding the path to mpi header files and that link executables to an MPI library. These are needed to compile ddSim or the multi-processor versions of mcSim and mdSim.

\section compile_mcMd_section Compiling mcSim and mdSim

To compile single-processor versions of the mcSim and mdSim, using the default gcc compiler, with a default set of features enabled, after running the configure script (see above) you must:

  - Change working directory to the src/ directory ("cd src").

  - Enter "make mcMd"

If successful, the above procedure should create executables bin/mcSim and bin/mdSim for MC and MD simulations. The "make mcMd" command will first compile all of the *.cpp source files in the src/util, src/inter, and src/mcMd directories, and create three static library files that contain the resulting objects.  Each *.cpp source file is compiled to create a *.o object file that is placed in the same directory as the corresponding source file.  Three static library (*.a) files named libutil.a, libinter.a and libmcmd.a will also be created and (by default) placed in the simpatico lib/ directory. These libraries contain all of the objects from the util/, inter/, and mcMd/ directories, respectively. These libraries are linked to the main programs src/mcMd/mcSim.cpp and src/mcMd/mdSim.cpp to create the executables.

If the above procedure fails, inspect the file src/compiler.mk.  Make sure that the value assigned to the makefile variable ROOT_DIR contains the correct absolute path for the simpatico/ root directory. Also check that the makefile variables defined inside the enable by the chosen value of COMPILER specify choices of compiler executable name and compiler options that are appropriate for your system. You may edit the src/compiler.mk file as needed. 

Users may change the locations of the executable and library files. The directory to which all executables files are written is given by the makefile variable BIN_DIR defined in the file src/compiler.mk, which is set to $(ROOT_DIR)/bin by default.  All libraries are written in the directory specified by the variable LIB_DIR, which is also defined in src/compiler.mk, and is set to $(ROOT_DIR)/lib by default.  The names of the MC and MD single-processor executables (mcSim and mdSim, by default) are given by the values of the variables MCSIM_EXE and MDSIM_EXE defined in src/mcMd/defines.mk.  Users may rename the executables either by changing the values of any of these makefile variables, or by simply moving the executable files after they are created. 

To make the executables accessible from the command line (without requiring that users invoke them with an absolute path name), users should either add the directory that contains these files to their unix PATH environment variable, or install all executable files in a directory that is already in their PATH.
  
To remove all of the object files, libraries, and executable files created by "make mcMd", enter "make clean-mcMd" from the src/ directory. Entering "make clean" removes all of these files, as well as any created by the "make ddMd" command (discussed below). Entering "make very-clean" removes all automatically gnerated files, including those removed by "make "clean" and the configuration files that were generated by the configure script.

\section compile_ddMd_section Compiling ddSim

To compile the multi-processor ddMd program, one must first select a compiler that links to an MPI library. To begin, choose one of the values for the 
COMPILER variable that contains the string "mpi" somewhere in the name. These denote combinations of compilers and options that link to an MPI library,
using paths that were appropriate on some of the machines used for development.
  
The settings for gcc_mpicxx and intel_mpicxx in the default compiler.mk file use a value "mpicxx" for the variable CXX, which specifies the compiler executable.  This is the name of a script that is used on some of the machines on which this code was developed. When this script is available, it invokes an mpi-enabled compiler that is selected by loading an appropriate software module. 

The settings gcc_openmpi reflect the paths that we used to compile on a multi-core Mac laptop, after installing openmpi from source. In this case, the required mpi header and library files were installed in subdirectories of /opt/local/include and /opt/local/bin. If you have an MPI library installed, but the header and library files are installed in a different location, you may need to edit the CXXFLAGS and LDFLAGS variables to reflect the correct locations.

After selecting an appropriate value for COMPILER variable and making any required changes to the compiler settings, you must:

  - cd to the src/ directory (if not already there).

  - Enter "make ddMd".

If successful, this procedure will create an executable named ddMd in the simpatico bin/ directory. To do so, it will recompile all of the code in the src/util/ and src/inter/ directories, and compile all of the code in the src/ddMd/ directory. As part of this process, it will create new MPI-enabled versions of the library containing objects from the src/util/ directory, named lib/libutil_m.a (in which the suffix "_m" stands for mpi), and create a new library lib/libddMd.a for the classes in the ddMd/ directory. 

The name of the parallel MD executable (ddSim by default) is defined by the variable DDSIM_EXE defined in src/ddMd/defines.mk. The executable is placed in the BIN_DIR directory.  To remove all object files libraries and executable created by the "make ddMd' command, enter "make clean-ddMd".

\section compile_multi_section Compiling mcSim and mdSim (multi-processor versions)

To compile multi-processor versions of mcSim and mdSim, select a compiler block that links to an MPI library, as described above for ddSim. Then:

  - cd the src/ directory.

  - Enter "make mcMd"

This should re-compile all of the classes in the src/mcMd directory, and create an mpi-enabled library named lib/libutil_m.a. If you have not previously compiled ddMd, this should recompile all of the code in the src/util and src/inter directories, and create MPI-enabled versions of the libraries, which are also distinguished from the serial versions by the addition of a suffix _m. 

The multi-processor versions of mcSim and mdSim can be used to run:

  - Multiple completely independent simulations as an MPI job, with separate parameter files

  - Multiple simulations with a sequence of parameter values from a single param file, using the 
    perturbation theory feature.

  - Replica exchange simulations.

Multi-processor mcSim and mdSim simulations are discussed in more detail \ref multiMcMd_page "here". 

\section compile_config_section Configuration Files

After the .configure script is run, the src/ directory and its subdirectories contains several makefile fragments
that users may need to edit in order to change compiler options or to enable or disable specific features of the code. These user configuration files are:
 
    - src/compiler.mk

    - src/util/defines.mk

    - src/inter/defines.mk

    - src/mcMd/defines.mk

    - src/ddMd/defines.mk

None of these files are in the git repository, or in the version of the code that is distributed as a tar archive.  They are all instead created by the configure script by making copies of default (repository) versions of each file.  The name of the default repository version of each such file is the name of the user version plus a suffix "_r" (for repository). The default and user versions of each such file are located in the same directory. Thus, for example, the user file src/mcMd/defines.mk is created by the configure script by copying the default version src/mcMd/defines.mk_r.  Only the user version of each such files is used by the build system. Because the user versions are not retained in the git repository, users may modify these files freely, without effecting synchronization between a users git repository and the origin repository from which it was cloned. 

The file src/compiler.mk defines makefile variables that specify the choice of C++ compiler and compiler options, as discussed above. It defines variables ROOT_DIR, SRC_DIR, BIN_DIR, and LIB_DIR that represent the paths to the Simpatico root directory and source directory, and the directories in which executables and libraries should be installed.  This file also contain a line that defines the variable MAKEDEP that is commented out by default, but which may be uncommented to enable automatic dependency generation (see \ref dependency_doc_section).

The makefile fragments src/util/defines.mk, src/inter/defines.mk, mcMd/defines.mk, and ddMd/defines.mk can be used to define makefile variables that enable or disable optional features of the code at compile time. Each of these files contains one or more commented out definitions for makefile variables that, when uncommented, cause corresponding C++ macros to be defined during compilation, and thus enable or disable optional various features during compilation. All of these variables, and the features they control, are discussed in a page about \ref preprocessor_page. 

The file src/mcMd/boundary/Boundary.h is also created by the configure script. This file defines a typedef Boundary that specifies what class should be used to represent periodic boundary conditions throughout the code. By default Boundary is defined to be a synonym for the class OrthorhombicBoundary, which represents a periodic orthorhombic simulation cell.  For the moment, there is no reason for users to change this.  The use of a typedef is intended to ease the later introduction of a non-orthogonal unit cell as a compile-time option.

\section dependency_doc_section Dependency Generation 

The Simpatico makefile system is set up to allow automatic generation and updating of files that list the dependencies of each source file. This feature is disabled by default, but may be enabled by following instructions given below.  Automatic dependency generation is not needed in order compile the code. It is, however, very useful for developers who must make frequent changes to a few C++ header or source files, because it allows them to automatically recompile only those source files that are affected by each change.  Unless this feature is enabled, the only safe way to recompile the code after changing any C++ file or configuration file is to do a clean rebuild, by entering "make clean-mcMd" or "make clean-ddMd" followed by "make mcMd" or "make ddMd" from the src/ directory. 

Automatic dependency generation uses a executable python script named makeDep in the bin/ directory. This script imports several python modules from the tools/python directory.  The system uses the -MM option of the gnu g++ C++ compiler to do the actual analysis of dependencies, and uses a python scripts to edit the output produced by g++. To function, this set of scripts requires that:
 
  - The g++ gnu C++ compiler executable (or a link to it with this name) must exist in a directory in the shell PATH variable.

  - A python interpreter must be accessible.

  - The Simpatico tools/python/ directory must be in the shell variable PYTHONPATH, which is the python module search path. 

  - The makefile variable MAKEDEP must be defined in the file src/compiler.mk. (The definition is commented out by default).

The gcc compiler and a python interpreter are installed by default on modern linux installations, and on Mac OS X with developer and command line tools installed.  To enable automatic dependency generation (after running the configure 
script) one must thus normally: 

  - Uncomment the line that defines the variable MAKEDEP in the file src/compiler.mk, and

  - Add the Simpatico tools/python directory to the PYTHONPATH unix shell variable. 

After making these changes, enter "make clean" once more from the src/ directory, and then recompile any programs you wish to use.  After compilation is complete, a new dependency file with a suffix *.d will be created alongside each *.cpp source file, in addition to a new *.o object file.  The *.d dependency file associated with an object file will also be regenerated whenever the object file is regenerated.

Dependency generation is disabled by default in order to allow inexperienced users to quickly compile the single processor versions of mcSim and mdSim with the simplified instructions given above ("./configure; cd src; make mcMd"), without having to first modify their PYTHONPATH. Dependency generation is not necessary for users who want to try out the code, but who do not immediately need to modify any source code.

Automatic dependency generation works by applying the script bin/makeDep to each *.cpp source file whenever that file is compiled, as a side effect of compilation.  This behavior is dictated by the pattern rules defined in the patterns.mk files in the src/util/, src/inter/, src/mcMd/, and src/ddMd/ directories.  Whenever a *.cpp file is compiled, the makeDep script generates a corresponding *.d file with the same base name.  Each *.d dependency file defines a makefile rule for the corresponding *.o object makefile file target. This rule contains a list of all the files upon which that object file depends.  This dependency list contains the associated *.cpp file and all of the *.h header files that this source file includes, including headers that are included indirectly.  Once such a dependency file exists, it will be used the next time "make" is invoked in order to determine if the corresponding object file target needs to be recreated as a result of changes in any of its dependencies. 

The dependency list for every *.o file contains the files src/compiler.mk and one or more of the defines.mk files, in addition to C++ source and header files.  This is because these makefile fragments contain definitions of compiler options and C++ preprocessor macros that can effect the object code produced by compilation. Modifying any of these makefile fragments will thus force recompilation of a large number of C++ source files. Modifying src/compiler.mk or src/util/defines.mk forces recompilation of every source file in Simpatico.  Modifying src/util/defines.mk force recompilation of all of the source files in src/inter, src/mcMd, and src/ddMd.  Modifying src/mcMd/defines.mk forces recompilation of all files in src/mcMd.  Modifying src/ddMd/defines.mk forces recompilation of all files in src/ddMd.

\section compile_doc_section Documentation
The html documentation you are reading was generated using the <a href=http://www.doxygen.org> doxygen </a> documentation utility.  If dOxygen is installed on your machine, you can regenerate all of the html documentation by changing the working directory to the doc/ directory and entering 
\code
> make html 
\endcode
The resulting html documentation is deposited in the doc/html/ directory. To read the documentation, open the file index.html in a browser to open the main page, or open any other html file and follow the link to the main page. 

The text of the page you are reading now, along with other web pages that are not extracted from the C++ header files, are in files in the doc/dox directory. These are written in plain text, and so can also be read with a text editor.  Documentation for each C++ class is instead extracted from documentation blocks in the class header file. 

Entering 'make clean' from the doc/ directory will remove all the html documentation from the doc/html directory. 

<ul>
 <li> \ref guide_page   (Up)    </li>
 <li> \ref usage_page (Next)  </li>
</ul>

*/
